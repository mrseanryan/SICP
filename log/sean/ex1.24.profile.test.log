Welcome to DrRacket, version 6.11 [3m].
Language: racket, with debugging; memory limit: 128 MB.
'(lambda (start (count-to-find 3))
   (if (= count-to-find 0)
     #t
     (if (prime-test? start)
       (search-for-primes-count (+ start 2) (- count-to-find 1))
       (search-for-primes-count (+ start 2) count-to-find))))
'(lambda (n (times 10))
   (cond ((= times 0) true) ((fermat-test n) (fast-prime? n (- times 1))) (else false)))
fast-prime? - 97 x 1000
cpu time: 19 real time: 19 gc time: 0
"[done]"
small numbers growing by 10
search-for-primes - 1000 x 10
>(search-for-primes 1000)
1009* 1013* 1019* <#t
>(search-for-primes 1000)
1009* 1013* 1019* <#t
>(search-for-primes 1000)
1009* 1013* 1019* <#t
>(search-for-primes 1000)
1009* 1013* 1019* <#t
>(search-for-primes 1000)
1009* 1013* 1019* <#t
>(search-for-primes 1000)
1009* 1013* 1019* <#t
>(search-for-primes 1000)
1009* 1013* 1019* <#t
>(search-for-primes 1000)
1009* 1013* 1019* <#t
>(search-for-primes 1000)
1009* 1013* 1019* <#t
>(search-for-primes 1000)
1009* 1013* 1019* <#t
cpu time: 93 real time: 94 gc time: 0
"[done]"
search-for-primes - 10000 x 10
>(search-for-primes 10000)
10007* 10009* 10037* <#t
>(search-for-primes 10000)
10007* 10009* 10037* <#t
>(search-for-primes 10000)
10007* 10009* 10037* <#t
>(search-for-primes 10000)
10007* 10009* 10037* <#t
>(search-for-primes 10000)
10007* 10009* 10037* <#t
>(search-for-primes 10000)
10007* 10009* 10037* <#t
>(search-for-primes 10000)
10007* 10009* 10037* <#t
>(search-for-primes 10000)
10007* 10009* 10037* <#t
>(search-for-primes 10000)
10007* 10009* 10037* <#t
>(search-for-primes 10000)
10007* 10009* 10037* <#t
cpu time: 229 real time: 231 gc time: 44
"[done]"
search-for-primes - 100000 x 10
>(search-for-primes 100000)
100003* 100019* 100043* <#t
>(search-for-primes 100000)
100003* 100019* 100043* <#t
>(search-for-primes 100000)
100003* 100019* 100043* <#t
>(search-for-primes 100000)
100003* 100019* 100043* <#t
>(search-for-primes 100000)
100003* 100019* 100043* <#t
>(search-for-primes 100000)
100003* 100019* 100043* <#t
>(search-for-primes 100000)
100003* 100019* 100043* <#t
>(search-for-primes 100000)
100003* 100019* 100043* <#t
>(search-for-primes 100000)
100003* 100019* 100043* <#t
>(search-for-primes 100000)
100003* 100019* 100043* <#t
cpu time: 209 real time: 211 gc time: 0
"[done]"
search-for-primes - 1000000 x 10
>(search-for-primes 1000000)
1000003* 1000033* 1000037* <#t
>(search-for-primes 1000000)
1000003* 1000033* 1000037* <#t
>(search-for-primes 1000000)
1000003* 1000033* 1000037* <#t
>(search-for-primes 1000000)
1000003* 1000033* 1000037* <#t
>(search-for-primes 1000000)
1000003* 1000033* 1000037* <#t
>(search-for-primes 1000000)
1000003* 1000033* 1000037* <#t
>(search-for-primes 1000000)
1000003* 1000033* 1000037* <#t
>(search-for-primes 1000000)
1000003* 1000033* 1000037* <#t
>(search-for-primes 1000000)
1000003* 1000033* 1000037* <#t
>(search-for-primes 1000000)
1000003* 1000033* 1000037* <#t
cpu time: 217 real time: 219 gc time: 0
"[done]"
_________________________
bigger numbers
search-for-primes - 1000000000 x 3
>(search-for-primes 1000000000)
1000000007* 1000000009* 1000000021* <#t
>(search-for-primes 1000000000)
1000000007* 1000000009* 1000000021* <#t
>(search-for-primes 1000000000)
1000000007* 1000000009* 1000000021* <#t
cpu time: 91 real time: 93 gc time: 20
"[done]"
search-for-primes - 1000000000000000000 x 3
>(search-for-primes 1000000000000000000)
1000000000000000003* 1000000000000000009* 1000000000000000031* <#t
>(search-for-primes 1000000000000000000)
1000000000000000003* 1000000000000000009* 1000000000000000031* <#t
>(search-for-primes 1000000000000000000)
1000000000000000003* 1000000000000000009* 1000000000000000031* <#t
cpu time: 84 real time: 84 gc time: 0
"[done]"
search-for-primes - 1000000000000000000000000000000000000 x 3
>(search-for-primes 1000000000000000000000000000000000000)
1000000000000000000000000000000000067* 1000000000000000000000000000000000123* 1000000000000000000000000000000000141* <#t
>(search-for-primes 1000000000000000000000000000000000000)
1000000000000000000000000000000000067* 1000000000000000000000000000000000123* 1000000000000000000000000000000000141* <#t
>(search-for-primes 1000000000000000000000000000000000000)
1000000000000000000000000000000000067* 1000000000000000000000000000000000123* 1000000000000000000000000000000000141* <#t
cpu time: 200 real time: 202 gc time: 56
"[done]"
search-for-primes - 1000000000000000000000000000000000000000000000000000000000000000000000000 x 3
>(search-for-primes
  1000000000000000000000000000000000000000000000000000000000000000000000000)
1000000000000000000000000000000000000000000000000000000000000000000000039* 1000000000000000000000000000000000000000000000000000000000000000000000669* 1000000000000000000000000000000000000000000000000000000000000000000000973* <#t
>(search-for-primes
  1000000000000000000000000000000000000000000000000000000000000000000000000)
1000000000000000000000000000000000000000000000000000000000000000000000039* 1000000000000000000000000000000000000000000000000000000000000000000000669* 1000000000000000000000000000000000000000000000000000000000000000000000973* <#t
>(search-for-primes
  1000000000000000000000000000000000000000000000000000000000000000000000000)
1000000000000000000000000000000000000000000000000000000000000000000000039* 1000000000000000000000000000000000000000000000000000000000000000000000669* 1000000000000000000000000000000000000000000000000000000000000000000000973* <#t
cpu time: 1361 real time: 1369 gc time: 307
"[done]"
logarithmic growth: 2 x digts -> 2 x duration
 - on Acer tablet roughly holds true for 1e9..1e36
 but 1e72 is 1e36 x 7: overhead of number size, and display?
 for smaller numbers, factors other than the number size seem to hold (so, for smaller numbers, the number size does not matter)
  quote: operations on large integers (above the normal 32/64-bit limit) are not constant in time, but functions of the number's size*, as mentioned by torinmr.
> 